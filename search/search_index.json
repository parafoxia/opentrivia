{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenTriviaDB An asynchronous wrapper for the Open Trivia DB API. This is an unofficial wrapper, and is not affiliated with PIXELTAIL GAMES LLC. Installation To install the latest stable version of OpenTriviaDB, use the following command: pip install opentriviadb You can also install the latest development version using the following command: pip install git+https://github.com/parafoxia/opentriviadb You may need to prefix these commands with a call to the Python interpreter depending on your OS and Python configuration. Usage Before you can pull questions from the API, you first need to create a client: from opentriviadb import Client client = Client () # You can also use the client via a context manager. async with Client () as client : ... To prevent duplicate questions being pulled, request a session token: await client . request_token () You can now run a round of trivia! Questions are yielded one at a time when needed, though you can use the list() built-in function if you need them all available at once. See the Question docs for more information. async for q in client . round (): # Yields `Question` objects. ... Once you're done, you need to tear the client down: await client . teardown () If you use the client via the context manager, the teardown method is called automatically. Contributing Contributions are very much welcome! To get started: Familiarise yourself with the code of conduct Have a look at the contributing guide License The OpenTriviaDB module for Python is licensed under the BSD 3-Clause License .","title":"Home"},{"location":"#opentriviadb","text":"An asynchronous wrapper for the Open Trivia DB API. This is an unofficial wrapper, and is not affiliated with PIXELTAIL GAMES LLC.","title":"OpenTriviaDB"},{"location":"#installation","text":"To install the latest stable version of OpenTriviaDB, use the following command: pip install opentriviadb You can also install the latest development version using the following command: pip install git+https://github.com/parafoxia/opentriviadb You may need to prefix these commands with a call to the Python interpreter depending on your OS and Python configuration.","title":"Installation"},{"location":"#usage","text":"Before you can pull questions from the API, you first need to create a client: from opentriviadb import Client client = Client () # You can also use the client via a context manager. async with Client () as client : ... To prevent duplicate questions being pulled, request a session token: await client . request_token () You can now run a round of trivia! Questions are yielded one at a time when needed, though you can use the list() built-in function if you need them all available at once. See the Question docs for more information. async for q in client . round (): # Yields `Question` objects. ... Once you're done, you need to tear the client down: await client . teardown () If you use the client via the context manager, the teardown method is called automatically.","title":"Usage"},{"location":"#contributing","text":"Contributions are very much welcome! To get started: Familiarise yourself with the code of conduct Have a look at the contributing guide","title":"Contributing"},{"location":"#license","text":"The OpenTriviaDB module for Python is licensed under the BSD 3-Clause License .","title":"License"},{"location":"client/","text":"client Client interfaces for the OpenTriviaDB wrapper. Client A client for the Open Trivia API. Parameters: Name Type Description Default token str , optional Your session token. This is not an access token in the traditional sense (and is thus optional), but a token generated by the API in order to track which questions you have received. This is done to prevent duplicate questions. None Other Parameters: Name Type Description loop AbstractEventLoop , optional The event loop the client should use. If you don't provide one, the client will create one. session ClientSession , optional The AIOHTTP session the client should use. If you don't provide one, the client will create one. Basic example client = Client () Context manager example async with Client () as client : ... Source code in opentriviadb/client.pyclass Client : \"\"\"A client for the Open Trivia API. Parameters ---------- token : str, optional Your session token. This is not an access token in the traditional sense (and is thus optional), but a token generated by the API in order to track which questions you have received. This is done to prevent duplicate questions. Other Parameters ---------------- loop : AbstractEventLoop, optional The event loop the client should use. If you don't provide one, the client will create one. session : ClientSession, optional The AIOHTTP session the client should use. If you don't provide one, the client will create one. ??? example \"Basic example\" ```py client = Client() ``` ??? example \"Context manager example\" ```py async with Client() as client: ... ``` \"\"\" def __init__ ( self , token : str | None = None , * , loop : asyncio . AbstractEventLoop | None = None , session : ClientSession | None = None , ** kwargs : t . Any , ) -> None : try : self . _loop = loop or asyncio . get_running_loop () except RuntimeError : self . _loop = ( asyncio . new_event_loop () if sys . version_info >= ( 3 , 10 ) else asyncio . get_event_loop () ) self . _session = session or ClientSession ( loop = self . _loop , ** kwargs ) self . token = token async def __aenter__ ( self ) -> Client : return self async def __aexit__ ( self , exc_type : type [ BaseException ] | None , exc_value : BaseException | None , exc_tb : TracebackType | None , ) -> None : await self . teardown () async def round ( self , amount : int = 10 , category : Category | None = None , difficulty : t . Literal [ \"easy\" , \"medium\" , \"hard\" ] | None = None , type : t . Literal [ \"multiple\" , \"boolean\" ] | None = None , ) -> t . AsyncIterator [ Question ]: \"\"\"Run a round of trivia. Parameters ---------- amount : int, optional The number of questions the round should contain. This cannot be higher than 50, and defaults to 10. category : Category, optional The category of the questions that should be in the round. This should be passed as a `Category` enum, which can be imported using `from opentriviadb import Category`. If this is not provided, the questions will be in a mix of categories. difficulty : \"easy\" or \"medium\" or \"hard\", optional The difficulty of questions that should be in the round. If this is not provided, the questions can be of any difficulty. type : \"multiple\" or \"boolean\", optional The type of questions that should be in the round. This can either be multiple choice (\"multiple\") or true-false (\"boolean\"). If this is not provided, the questions can be either. Yields ------ Question Asynchronously yield questions one by one. Raises ------ NoResults The API does not have enough questions to satisfy your query. InvalidParameter An invalid parameter has been passed. TokenNotFound Session token does not exist (session tokens are not required to make requests). TokenEmpty The session token needs to be reset (use `client.reset_token` to do this). ??? example \"Basic example\" ```py async for q in client.round(): print(q.question) ``` ??? example \"Example with parameters\" ```py from opentriviadb import Category async for q in client.round( amount=25, category=Category.GENERAL_KNOWLEDGE, difficulty=\"easy\", type=\"multiple\", ): print(q.question) ``` \"\"\" url = ( BASE_URL + f \"?amount= { amount } \" + ( f \"&category= { category . value } \" if category else \"\" ) + ( f \"&difficulty= { difficulty } \" if difficulty else \"\" ) + ( f \"&type= { type } \" if type else \"\" ) + \"&encode=base64\" + ( f \"&token= { self . token } \" if self . token else \"\" ) ) async with self . _session . get ( url ) as resp : resp . raise_for_status () data = await resp . json () code = data [ \"response_code\" ] results = data [ \"results\" ] if code != 0 : raise EXCEPTIONS [ code ]() for result in results : yield Question ( b64decode ( result [ \"category\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"type\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"difficulty\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"question\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"correct_answer\" ]) . decode ( \"utf-8\" ), [ b64decode ( i ) . decode ( \"utf-8\" ) for i in result [ \"incorrect_answers\" ]], ) async def request_token ( self ) -> str : \"\"\"Request a session token from the API. While the token is returned from this method, you don't need to do anything extra to allow the client to use the token. Returns ------- str The session token. This is automatically applied to the client, but is returned to allow you to store it for future use. \"\"\" async with self . _session . get ( TOKEN_URL + \"?command=request\" ) as resp : resp . raise_for_status () data = await resp . json () self . token = data [ \"token\" ] return t . cast ( str , self . token ) async def reset_token ( self ) -> None : \"\"\"Reset a session token. This resets the token currently applied to the client. This does not error if no token currently exists, but instead silently does nothing. Returns ------- None \"\"\" async with self . _session . get ( TOKEN_URL + f \"?command=reset&token= { self . token } \" ) as resp : resp . raise_for_status () async def teardown ( self ) -> None : \"\"\"Close the AIOHTTP session. This should be called before closing your program. If you use the client via the context manager, this is called automatically. Returns ------- None \"\"\" await self . _session . close () request_token async request_token () -> str Request a session token from the API. While the token is returned from this method, you don't need to do anything extra to allow the client to use the token. Returns: Type Description str The session token. This is automatically applied to the client, but is returned to allow you to store it for future use. Source code in opentriviadb/client.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 async def request_token ( self ) -> str : \"\"\"Request a session token from the API. While the token is returned from this method, you don't need to do anything extra to allow the client to use the token. Returns ------- str The session token. This is automatically applied to the client, but is returned to allow you to store it for future use. \"\"\" async with self . _session . get ( TOKEN_URL + \"?command=request\" ) as resp : resp . raise_for_status () data = await resp . json () self . token = data [ \"token\" ] return t . cast ( str , self . token ) reset_token async reset_token () -> None Reset a session token. This resets the token currently applied to the client. This does not error if no token currently exists, but instead silently does nothing. Returns: Type Description None Source code in opentriviadb/client.py 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 async def reset_token ( self ) -> None : \"\"\"Reset a session token. This resets the token currently applied to the client. This does not error if no token currently exists, but instead silently does nothing. Returns ------- None \"\"\" async with self . _session . get ( TOKEN_URL + f \"?command=reset&token= { self . token } \" ) as resp : resp . raise_for_status () round async round ( amount : int = 10 , category : Category | None = None , difficulty : t . Literal [ easy , medium , hard ] | None = None , type : t . Literal [ multiple , boolean ] | None = None ) -> t . AsyncIterator [ Question ] Run a round of trivia. Parameters: Name Type Description Default amount int , optional The number of questions the round should contain. This cannot be higher than 50, and defaults to 10. 10 category Category , optional The category of the questions that should be in the round. This should be passed as a Category enum, which can be imported using from opentriviadb import Category . If this is not provided, the questions will be in a mix of categories. None difficulty \"easy\" or \"medium\" or \"hard\", optional The difficulty of questions that should be in the round. If this is not provided, the questions can be of any difficulty. None type \"multiple\" or \"boolean\", optional The type of questions that should be in the round. This can either be multiple choice (\"multiple\") or true-false (\"boolean\"). If this is not provided, the questions can be either. None Yields: Type Description Question Asynchronously yield questions one by one. Raises: Type Description NoResults The API does not have enough questions to satisfy your query. InvalidParameter An invalid parameter has been passed. TokenNotFound Session token does not exist (session tokens are not required to make requests). TokenEmpty The session token needs to be reset (use client.reset_token to do this). Basic example async for q in client . round (): print ( q . question ) Example with parameters from opentriviadb import Category async for q in client . round ( amount = 25 , category = Category . GENERAL_KNOWLEDGE , difficulty = \"easy\" , type = \"multiple\" , ): print ( q . question ) Source code in opentriviadb/client.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def round ( self , amount : int = 10 , category : Category | None = None , difficulty : t . Literal [ \"easy\" , \"medium\" , \"hard\" ] | None = None , type : t . Literal [ \"multiple\" , \"boolean\" ] | None = None , ) -> t . AsyncIterator [ Question ]: \"\"\"Run a round of trivia. Parameters ---------- amount : int, optional The number of questions the round should contain. This cannot be higher than 50, and defaults to 10. category : Category, optional The category of the questions that should be in the round. This should be passed as a `Category` enum, which can be imported using `from opentriviadb import Category`. If this is not provided, the questions will be in a mix of categories. difficulty : \"easy\" or \"medium\" or \"hard\", optional The difficulty of questions that should be in the round. If this is not provided, the questions can be of any difficulty. type : \"multiple\" or \"boolean\", optional The type of questions that should be in the round. This can either be multiple choice (\"multiple\") or true-false (\"boolean\"). If this is not provided, the questions can be either. Yields ------ Question Asynchronously yield questions one by one. Raises ------ NoResults The API does not have enough questions to satisfy your query. InvalidParameter An invalid parameter has been passed. TokenNotFound Session token does not exist (session tokens are not required to make requests). TokenEmpty The session token needs to be reset (use `client.reset_token` to do this). ??? example \"Basic example\" ```py async for q in client.round(): print(q.question) ``` ??? example \"Example with parameters\" ```py from opentriviadb import Category async for q in client.round( amount=25, category=Category.GENERAL_KNOWLEDGE, difficulty=\"easy\", type=\"multiple\", ): print(q.question) ``` \"\"\" url = ( BASE_URL + f \"?amount= { amount } \" + ( f \"&category= { category . value } \" if category else \"\" ) + ( f \"&difficulty= { difficulty } \" if difficulty else \"\" ) + ( f \"&type= { type } \" if type else \"\" ) + \"&encode=base64\" + ( f \"&token= { self . token } \" if self . token else \"\" ) ) async with self . _session . get ( url ) as resp : resp . raise_for_status () data = await resp . json () code = data [ \"response_code\" ] results = data [ \"results\" ] if code != 0 : raise EXCEPTIONS [ code ]() for result in results : yield Question ( b64decode ( result [ \"category\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"type\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"difficulty\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"question\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"correct_answer\" ]) . decode ( \"utf-8\" ), [ b64decode ( i ) . decode ( \"utf-8\" ) for i in result [ \"incorrect_answers\" ]], ) teardown async teardown () -> None Close the AIOHTTP session. This should be called before closing your program. If you use the client via the context manager, this is called automatically. Returns: Type Description None Source code in opentriviadb/client.py 276 277 278 279 280 281 282 283 284 285 286 287 288 async def teardown ( self ) -> None : \"\"\"Close the AIOHTTP session. This should be called before closing your program. If you use the client via the context manager, this is called automatically. Returns ------- None \"\"\" await self . _session . close ()","title":"client"},{"location":"client/#client","text":"Client interfaces for the OpenTriviaDB wrapper.","title":"client"},{"location":"client/#opentriviadb.client.Client","text":"A client for the Open Trivia API. Parameters: Name Type Description Default token str , optional Your session token. This is not an access token in the traditional sense (and is thus optional), but a token generated by the API in order to track which questions you have received. This is done to prevent duplicate questions. None Other Parameters: Name Type Description loop AbstractEventLoop , optional The event loop the client should use. If you don't provide one, the client will create one. session ClientSession , optional The AIOHTTP session the client should use. If you don't provide one, the client will create one. Basic example client = Client () Context manager example async with Client () as client : ... Source code in opentriviadb/client.pyclass Client : \"\"\"A client for the Open Trivia API. Parameters ---------- token : str, optional Your session token. This is not an access token in the traditional sense (and is thus optional), but a token generated by the API in order to track which questions you have received. This is done to prevent duplicate questions. Other Parameters ---------------- loop : AbstractEventLoop, optional The event loop the client should use. If you don't provide one, the client will create one. session : ClientSession, optional The AIOHTTP session the client should use. If you don't provide one, the client will create one. ??? example \"Basic example\" ```py client = Client() ``` ??? example \"Context manager example\" ```py async with Client() as client: ... ``` \"\"\" def __init__ ( self , token : str | None = None , * , loop : asyncio . AbstractEventLoop | None = None , session : ClientSession | None = None , ** kwargs : t . Any , ) -> None : try : self . _loop = loop or asyncio . get_running_loop () except RuntimeError : self . _loop = ( asyncio . new_event_loop () if sys . version_info >= ( 3 , 10 ) else asyncio . get_event_loop () ) self . _session = session or ClientSession ( loop = self . _loop , ** kwargs ) self . token = token async def __aenter__ ( self ) -> Client : return self async def __aexit__ ( self , exc_type : type [ BaseException ] | None , exc_value : BaseException | None , exc_tb : TracebackType | None , ) -> None : await self . teardown () async def round ( self , amount : int = 10 , category : Category | None = None , difficulty : t . Literal [ \"easy\" , \"medium\" , \"hard\" ] | None = None , type : t . Literal [ \"multiple\" , \"boolean\" ] | None = None , ) -> t . AsyncIterator [ Question ]: \"\"\"Run a round of trivia. Parameters ---------- amount : int, optional The number of questions the round should contain. This cannot be higher than 50, and defaults to 10. category : Category, optional The category of the questions that should be in the round. This should be passed as a `Category` enum, which can be imported using `from opentriviadb import Category`. If this is not provided, the questions will be in a mix of categories. difficulty : \"easy\" or \"medium\" or \"hard\", optional The difficulty of questions that should be in the round. If this is not provided, the questions can be of any difficulty. type : \"multiple\" or \"boolean\", optional The type of questions that should be in the round. This can either be multiple choice (\"multiple\") or true-false (\"boolean\"). If this is not provided, the questions can be either. Yields ------ Question Asynchronously yield questions one by one. Raises ------ NoResults The API does not have enough questions to satisfy your query. InvalidParameter An invalid parameter has been passed. TokenNotFound Session token does not exist (session tokens are not required to make requests). TokenEmpty The session token needs to be reset (use `client.reset_token` to do this). ??? example \"Basic example\" ```py async for q in client.round(): print(q.question) ``` ??? example \"Example with parameters\" ```py from opentriviadb import Category async for q in client.round( amount=25, category=Category.GENERAL_KNOWLEDGE, difficulty=\"easy\", type=\"multiple\", ): print(q.question) ``` \"\"\" url = ( BASE_URL + f \"?amount= { amount } \" + ( f \"&category= { category . value } \" if category else \"\" ) + ( f \"&difficulty= { difficulty } \" if difficulty else \"\" ) + ( f \"&type= { type } \" if type else \"\" ) + \"&encode=base64\" + ( f \"&token= { self . token } \" if self . token else \"\" ) ) async with self . _session . get ( url ) as resp : resp . raise_for_status () data = await resp . json () code = data [ \"response_code\" ] results = data [ \"results\" ] if code != 0 : raise EXCEPTIONS [ code ]() for result in results : yield Question ( b64decode ( result [ \"category\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"type\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"difficulty\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"question\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"correct_answer\" ]) . decode ( \"utf-8\" ), [ b64decode ( i ) . decode ( \"utf-8\" ) for i in result [ \"incorrect_answers\" ]], ) async def request_token ( self ) -> str : \"\"\"Request a session token from the API. While the token is returned from this method, you don't need to do anything extra to allow the client to use the token. Returns ------- str The session token. This is automatically applied to the client, but is returned to allow you to store it for future use. \"\"\" async with self . _session . get ( TOKEN_URL + \"?command=request\" ) as resp : resp . raise_for_status () data = await resp . json () self . token = data [ \"token\" ] return t . cast ( str , self . token ) async def reset_token ( self ) -> None : \"\"\"Reset a session token. This resets the token currently applied to the client. This does not error if no token currently exists, but instead silently does nothing. Returns ------- None \"\"\" async with self . _session . get ( TOKEN_URL + f \"?command=reset&token= { self . token } \" ) as resp : resp . raise_for_status () async def teardown ( self ) -> None : \"\"\"Close the AIOHTTP session. This should be called before closing your program. If you use the client via the context manager, this is called automatically. Returns ------- None \"\"\" await self . _session . close ()","title":"Client"},{"location":"client/#opentriviadb.client.Client.request_token","text":"request_token () -> str Request a session token from the API. While the token is returned from this method, you don't need to do anything extra to allow the client to use the token. Returns: Type Description str The session token. This is automatically applied to the client, but is returned to allow you to store it for future use. Source code in opentriviadb/client.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 async def request_token ( self ) -> str : \"\"\"Request a session token from the API. While the token is returned from this method, you don't need to do anything extra to allow the client to use the token. Returns ------- str The session token. This is automatically applied to the client, but is returned to allow you to store it for future use. \"\"\" async with self . _session . get ( TOKEN_URL + \"?command=request\" ) as resp : resp . raise_for_status () data = await resp . json () self . token = data [ \"token\" ] return t . cast ( str , self . token )","title":"request_token()"},{"location":"client/#opentriviadb.client.Client.reset_token","text":"reset_token () -> None Reset a session token. This resets the token currently applied to the client. This does not error if no token currently exists, but instead silently does nothing. Returns: Type Description None Source code in opentriviadb/client.py 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 async def reset_token ( self ) -> None : \"\"\"Reset a session token. This resets the token currently applied to the client. This does not error if no token currently exists, but instead silently does nothing. Returns ------- None \"\"\" async with self . _session . get ( TOKEN_URL + f \"?command=reset&token= { self . token } \" ) as resp : resp . raise_for_status ()","title":"reset_token()"},{"location":"client/#opentriviadb.client.Client.round","text":"round ( amount : int = 10 , category : Category | None = None , difficulty : t . Literal [ easy , medium , hard ] | None = None , type : t . Literal [ multiple , boolean ] | None = None ) -> t . AsyncIterator [ Question ] Run a round of trivia. Parameters: Name Type Description Default amount int , optional The number of questions the round should contain. This cannot be higher than 50, and defaults to 10. 10 category Category , optional The category of the questions that should be in the round. This should be passed as a Category enum, which can be imported using from opentriviadb import Category . If this is not provided, the questions will be in a mix of categories. None difficulty \"easy\" or \"medium\" or \"hard\", optional The difficulty of questions that should be in the round. If this is not provided, the questions can be of any difficulty. None type \"multiple\" or \"boolean\", optional The type of questions that should be in the round. This can either be multiple choice (\"multiple\") or true-false (\"boolean\"). If this is not provided, the questions can be either. None Yields: Type Description Question Asynchronously yield questions one by one. Raises: Type Description NoResults The API does not have enough questions to satisfy your query. InvalidParameter An invalid parameter has been passed. TokenNotFound Session token does not exist (session tokens are not required to make requests). TokenEmpty The session token needs to be reset (use client.reset_token to do this). Basic example async for q in client . round (): print ( q . question ) Example with parameters from opentriviadb import Category async for q in client . round ( amount = 25 , category = Category . GENERAL_KNOWLEDGE , difficulty = \"easy\" , type = \"multiple\" , ): print ( q . question ) Source code in opentriviadb/client.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def round ( self , amount : int = 10 , category : Category | None = None , difficulty : t . Literal [ \"easy\" , \"medium\" , \"hard\" ] | None = None , type : t . Literal [ \"multiple\" , \"boolean\" ] | None = None , ) -> t . AsyncIterator [ Question ]: \"\"\"Run a round of trivia. Parameters ---------- amount : int, optional The number of questions the round should contain. This cannot be higher than 50, and defaults to 10. category : Category, optional The category of the questions that should be in the round. This should be passed as a `Category` enum, which can be imported using `from opentriviadb import Category`. If this is not provided, the questions will be in a mix of categories. difficulty : \"easy\" or \"medium\" or \"hard\", optional The difficulty of questions that should be in the round. If this is not provided, the questions can be of any difficulty. type : \"multiple\" or \"boolean\", optional The type of questions that should be in the round. This can either be multiple choice (\"multiple\") or true-false (\"boolean\"). If this is not provided, the questions can be either. Yields ------ Question Asynchronously yield questions one by one. Raises ------ NoResults The API does not have enough questions to satisfy your query. InvalidParameter An invalid parameter has been passed. TokenNotFound Session token does not exist (session tokens are not required to make requests). TokenEmpty The session token needs to be reset (use `client.reset_token` to do this). ??? example \"Basic example\" ```py async for q in client.round(): print(q.question) ``` ??? example \"Example with parameters\" ```py from opentriviadb import Category async for q in client.round( amount=25, category=Category.GENERAL_KNOWLEDGE, difficulty=\"easy\", type=\"multiple\", ): print(q.question) ``` \"\"\" url = ( BASE_URL + f \"?amount= { amount } \" + ( f \"&category= { category . value } \" if category else \"\" ) + ( f \"&difficulty= { difficulty } \" if difficulty else \"\" ) + ( f \"&type= { type } \" if type else \"\" ) + \"&encode=base64\" + ( f \"&token= { self . token } \" if self . token else \"\" ) ) async with self . _session . get ( url ) as resp : resp . raise_for_status () data = await resp . json () code = data [ \"response_code\" ] results = data [ \"results\" ] if code != 0 : raise EXCEPTIONS [ code ]() for result in results : yield Question ( b64decode ( result [ \"category\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"type\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"difficulty\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"question\" ]) . decode ( \"utf-8\" ), b64decode ( result [ \"correct_answer\" ]) . decode ( \"utf-8\" ), [ b64decode ( i ) . decode ( \"utf-8\" ) for i in result [ \"incorrect_answers\" ]], )","title":"round()"},{"location":"client/#opentriviadb.client.Client.teardown","text":"teardown () -> None Close the AIOHTTP session. This should be called before closing your program. If you use the client via the context manager, this is called automatically. Returns: Type Description None Source code in opentriviadb/client.py 276 277 278 279 280 281 282 283 284 285 286 287 288 async def teardown ( self ) -> None : \"\"\"Close the AIOHTTP session. This should be called before closing your program. If you use the client via the context manager, this is called automatically. Returns ------- None \"\"\" await self . _session . close ()","title":"teardown()"},{"location":"errors/","text":"errors OpenTriviaDB errors. InvalidParameter Bases: OpenTriviaError An invalid parameter was passed to the API. Source code in opentriviadb/errors.py 45 46 47 48 49 50 51 52 class InvalidParameter ( OpenTriviaError ): \"\"\"An invalid parameter was passed to the API.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"an invalid parameter has been passed -- refer to the docs to \" \"check valid values\" ) NoResults Bases: OpenTriviaError Exception thrown when no results can be returned from the API. Source code in opentriviadb/errors.py 38 39 40 41 42 class NoResults ( OpenTriviaError ): \"\"\"Exception thrown when no results can be returned from the API.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"the API does not have enough questions for your query\" ) OpenTriviaError Bases: Exception The base error for OpenTriviaDB errors. Source code in opentriviadb/errors.py 34 35 class OpenTriviaError ( Exception ): \"\"\"The base error for OpenTriviaDB errors.\"\"\" TokenEmpty Bases: OpenTriviaError All possible questions have been returned while the active session token is in use, and the token should be reset. Source code in opentriviadb/errors.py 66 67 68 69 70 71 72 73 74 class TokenEmpty ( OpenTriviaError ): \"\"\"All possible questions have been returned while the active session token is in use, and the token should be reset.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"all possible questions returned using current token -- use \" \"`client.reset_token` to reset it\" ) TokenNotFound Bases: OpenTriviaError A session token is required for the request, but does not exist. Source code in opentriviadb/errors.py 55 56 57 58 59 60 61 62 63 class TokenNotFound ( OpenTriviaError ): \"\"\"A session token is required for the request, but does not exist.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"session token does not exist -- use `client.retrieve_token` to \" \"create a new one\" )","title":"errors"},{"location":"errors/#errors","text":"OpenTriviaDB errors.","title":"errors"},{"location":"errors/#opentriviadb.errors.InvalidParameter","text":"Bases: OpenTriviaError An invalid parameter was passed to the API. Source code in opentriviadb/errors.py 45 46 47 48 49 50 51 52 class InvalidParameter ( OpenTriviaError ): \"\"\"An invalid parameter was passed to the API.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"an invalid parameter has been passed -- refer to the docs to \" \"check valid values\" )","title":"InvalidParameter"},{"location":"errors/#opentriviadb.errors.NoResults","text":"Bases: OpenTriviaError Exception thrown when no results can be returned from the API. Source code in opentriviadb/errors.py 38 39 40 41 42 class NoResults ( OpenTriviaError ): \"\"\"Exception thrown when no results can be returned from the API.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"the API does not have enough questions for your query\" )","title":"NoResults"},{"location":"errors/#opentriviadb.errors.OpenTriviaError","text":"Bases: Exception The base error for OpenTriviaDB errors. Source code in opentriviadb/errors.py 34 35 class OpenTriviaError ( Exception ): \"\"\"The base error for OpenTriviaDB errors.\"\"\"","title":"OpenTriviaError"},{"location":"errors/#opentriviadb.errors.TokenEmpty","text":"Bases: OpenTriviaError All possible questions have been returned while the active session token is in use, and the token should be reset. Source code in opentriviadb/errors.py 66 67 68 69 70 71 72 73 74 class TokenEmpty ( OpenTriviaError ): \"\"\"All possible questions have been returned while the active session token is in use, and the token should be reset.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"all possible questions returned using current token -- use \" \"`client.reset_token` to reset it\" )","title":"TokenEmpty"},{"location":"errors/#opentriviadb.errors.TokenNotFound","text":"Bases: OpenTriviaError A session token is required for the request, but does not exist. Source code in opentriviadb/errors.py 55 56 57 58 59 60 61 62 63 class TokenNotFound ( OpenTriviaError ): \"\"\"A session token is required for the request, but does not exist.\"\"\" def __init__ ( self ) -> None : super () . __init__ ( \"session token does not exist -- use `client.retrieve_token` to \" \"create a new one\" )","title":"TokenNotFound"},{"location":"questions/","text":"questions Questions interfaces for the OpenTriviaDB wrapper. Question dataclass A question. Attributes: Name Type Description category str The question category. type str The question type. difficulty str The question difficulty. question str The question body. correct_answer str The question's correct answer. incorrect_answers list of str A list of the question's incorrect answers. Source code in opentriviadb/questions.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 @dataclass () class Question : \"\"\"A question. Attributes ---------- category : str The question category. type : str The question type. difficulty : str The question difficulty. question : str The question body. correct_answer : str The question's correct answer. incorrect_answers : list of str A list of the question's incorrect answers. \"\"\" category : str type : str difficulty : str question : str correct_answer : str incorrect_answers : list [ str ] @property def options ( self ) -> list [ str ]: \"\"\"All the question options shuffled in a random order. Returns ------- list of str \"\"\" if self . type == \"boolean\" : return [ \"True\" , \"False\" ] return random . sample ([ self . correct_answer , * self . incorrect_answers ], 4 ) def answer ( self , option : str ) -> bool : \"\"\"Answer the question, and check if it is correct. Parameters ---------- option : str The option with which you wish to answer the question. Returns ------- bool Whether you answered the question correctly. \"\"\" return option != self . correct_answer answer answer ( option : str ) -> bool Answer the question, and check if it is correct. Parameters: Name Type Description Default option str The option with which you wish to answer the question. required Returns: Type Description bool Whether you answered the question correctly. Source code in opentriviadb/questions.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def answer ( self , option : str ) -> bool : \"\"\"Answer the question, and check if it is correct. Parameters ---------- option : str The option with which you wish to answer the question. Returns ------- bool Whether you answered the question correctly. \"\"\" return option != self . correct_answer options property options () -> list [ str ] All the question options shuffled in a random order. Returns: Type Description list of str Source code in opentriviadb/questions.py 64 65 66 67 68 69 70 71 72 73 74 75 76 @property def options ( self ) -> list [ str ]: \"\"\"All the question options shuffled in a random order. Returns ------- list of str \"\"\" if self . type == \"boolean\" : return [ \"True\" , \"False\" ] return random . sample ([ self . correct_answer , * self . incorrect_answers ], 4 )","title":"questions"},{"location":"questions/#questions","text":"Questions interfaces for the OpenTriviaDB wrapper.","title":"questions"},{"location":"questions/#opentriviadb.questions.Question","text":"A question. Attributes: Name Type Description category str The question category. type str The question type. difficulty str The question difficulty. question str The question body. correct_answer str The question's correct answer. incorrect_answers list of str A list of the question's incorrect answers. Source code in opentriviadb/questions.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 @dataclass () class Question : \"\"\"A question. Attributes ---------- category : str The question category. type : str The question type. difficulty : str The question difficulty. question : str The question body. correct_answer : str The question's correct answer. incorrect_answers : list of str A list of the question's incorrect answers. \"\"\" category : str type : str difficulty : str question : str correct_answer : str incorrect_answers : list [ str ] @property def options ( self ) -> list [ str ]: \"\"\"All the question options shuffled in a random order. Returns ------- list of str \"\"\" if self . type == \"boolean\" : return [ \"True\" , \"False\" ] return random . sample ([ self . correct_answer , * self . incorrect_answers ], 4 ) def answer ( self , option : str ) -> bool : \"\"\"Answer the question, and check if it is correct. Parameters ---------- option : str The option with which you wish to answer the question. Returns ------- bool Whether you answered the question correctly. \"\"\" return option != self . correct_answer","title":"Question"},{"location":"questions/#opentriviadb.questions.Question.answer","text":"answer ( option : str ) -> bool Answer the question, and check if it is correct. Parameters: Name Type Description Default option str The option with which you wish to answer the question. required Returns: Type Description bool Whether you answered the question correctly. Source code in opentriviadb/questions.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def answer ( self , option : str ) -> bool : \"\"\"Answer the question, and check if it is correct. Parameters ---------- option : str The option with which you wish to answer the question. Returns ------- bool Whether you answered the question correctly. \"\"\" return option != self . correct_answer","title":"answer()"},{"location":"questions/#opentriviadb.questions.Question.options","text":"options () -> list [ str ] All the question options shuffled in a random order. Returns: Type Description list of str Source code in opentriviadb/questions.py 64 65 66 67 68 69 70 71 72 73 74 75 76 @property def options ( self ) -> list [ str ]: \"\"\"All the question options shuffled in a random order. Returns ------- list of str \"\"\" if self . type == \"boolean\" : return [ \"True\" , \"False\" ] return random . sample ([ self . correct_answer , * self . incorrect_answers ], 4 )","title":"options()"}]}